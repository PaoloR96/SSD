package Main;

import javax.crypto.*;
import javax.crypto.spec.SecretKeySpec;
import java.security.InvalidKeyException;
import java.security.NoSuchAlgorithmException;
import java.util.Arrays;

public class AES {
	private final String key="SecretKey12345678";
	private SecretKey secretKey;
	private  Cipher cipher;
	byte[] keyBytes;
	byte[] encryptedBytes;
	byte[] decryptedBytes;
	
	

	public void AES_CRYPT(String Msg) throws NoSuchAlgorithmException, NoSuchPaddingException, InvalidKeyException, IllegalBlockSizeException, BadPaddingException {
				// Truncate or pad the key to 16 bytes
				keyBytes = Arrays.copyOf(key.getBytes(), 16);
				
				// Generate a secret key from the key bytes
	            secretKey = new SecretKeySpec(keyBytes, "AES");
	            
	            // Create a Cipher object for AES encryption
	             cipher = Cipher.getInstance("AES");
	             
	          // Initialize the cipher in encryption mode with the secret key
	             cipher.init(Cipher.ENCRYPT_MODE, secretKey);
	             
	             
	             // Encrypt the message
	             encryptedBytes = cipher.doFinal(message.getBytes());

	             // Print the encrypted message
	             System.out.println("Encrypted message: " + bytesToHex(encryptedBytes));
		
		
	}
	
    private static final char[] HEX_ARRAY = "0123456789ABCDEF".toCharArray();

    // Convert a byte array to a hexadecimal string
    public static String bytesToHex(byte[] bytes) {
        char[] hexChars = new char[bytes.length * 2];
        for (int i = 0; i < bytes.length; i++) {
            int v = bytes[i] & 0xFF;
            // Get the high nibble and convert it to a hexadecimal character
            hexChars[i * 2] = HEX_ARRAY[v >>> 4];
            // Get the low nibble and convert it to a hexadecimal character
            hexChars[i * 2 + 1] = HEX_ARRAY[v & 0x0F];
        }
        return new String(hexChars);
    }

	
	
	
	public void AES_DECRYPT() throws InvalidKeyException, IllegalBlockSizeException, BadPaddingException {
		
		
        // Decrypt the message
        decryptedBytes = cipher.doFinal(encryptedBytes);

        // Print the decrypted message
        System.out.println("Decrypted message: " + new String(decryptedBytes));
        
        cipher.init(Cipher.DECRYPT_MODE, secretKey);
        
        byte[] decryptedBytes = cipher.doFinal(encryptedBytes);
        
        System.out.println("Decrypted message: " + new String(decryptedBytes));
		
	}


}
